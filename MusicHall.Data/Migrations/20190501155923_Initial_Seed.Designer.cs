// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using MusicHall.Data;

namespace MusicHall.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190501155923_Initial_Seed")]
    partial class Initial_Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MusicHall.Core.Domain.Administrators.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at");

                    b.Property<bool>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<Guid>("Guid")
                        .HasColumnName("guid");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .HasColumnName("login");

                    b.Property<string>("PasswordRecoveryToken")
                        .HasColumnName("password_recovery_token");

                    b.Property<DateTime?>("PasswordRecoveryTokenDateGenerated")
                        .HasColumnName("password_recovery_token_date_generated");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Email = "admin@admin.fr",
                            FirstName = "admin",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "admin",
                            Login = "admin@admin.fr",
                            UpdatedAtOnUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Administrators.AdministratorPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AdministratorId")
                        .HasColumnName("administrator_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at");

                    b.Property<string>("Password")
                        .HasColumnName("password");

                    b.Property<int>("PasswordFormat")
                        .HasColumnName("password_format");

                    b.Property<int>("PasswordFormatId")
                        .HasColumnName("password_format_id");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("password_salt");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("administrator_passwords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministratorId = 1,
                            CreatedAtUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "admin",
                            PasswordFormat = 0,
                            PasswordFormatId = 0,
                            UpdatedAtOnUtc = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Common.Civility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("civilities");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CivilityId")
                        .HasColumnName("civility_id");

                    b.Property<bool>("Confirmed")
                        .HasColumnName("confirmed");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at");

                    b.Property<bool>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<Guid>("Guid")
                        .HasColumnName("guid");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile");

                    b.Property<string>("PasswordRecoveryToken")
                        .HasColumnName("password_recovery_token");

                    b.Property<DateTime?>("PasswordRecoveryTokenDateGenerated")
                        .HasColumnName("password_recovery_token_date_generated");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CivilityId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at");

                    b.Property<string>("Password")
                        .HasColumnName("password");

                    b.Property<int>("PasswordFormat")
                        .HasColumnName("password_format");

                    b.Property<int>("PasswordFormatId")
                        .HasColumnName("password_format_id");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("password_salt");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_passwords");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Administrators.AdministratorPassword", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Administrators.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.User", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Common.Civility", "Civility")
                        .WithMany()
                        .HasForeignKey("CivilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserPassword", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
