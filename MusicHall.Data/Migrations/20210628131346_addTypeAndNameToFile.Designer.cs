// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicHall.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MusicHall.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210628131346_addTypeAndNameToFile")]
    partial class addTypeAndNameToFile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MusicHall.Core.Domain.Bands.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("bands");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Common.Civility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("civilities");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Messages.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("EnableSsl")
                        .HasColumnName("enable_ssl")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnName("port")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnName("use_default_credentials")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("email_account");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachedDownloadId")
                        .HasColumnName("attached_download_id")
                        .HasColumnType("integer");

                    b.Property<string>("BccEmailAddresses")
                        .HasColumnName("bcc_email_addresses")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DelayBeforeSend")
                        .HasColumnName("delay_before_send")
                        .HasColumnType("integer");

                    b.Property<int>("DelayPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("DelayPeriodId")
                        .HasColumnName("delay_period_id")
                        .HasColumnType("integer");

                    b.Property<int>("EmailAccountId")
                        .HasColumnName("email_account_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("message_template");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachedDownloadId")
                        .HasColumnName("attachment_download_id")
                        .HasColumnType("integer");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnName("attachment_file_name")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentFilePath")
                        .HasColumnName("attachment_file_path")
                        .HasColumnType("text");

                    b.Property<string>("Bcc")
                        .HasColumnName("bcc")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnName("cc")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnName("created_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnName("dont_send_before_date_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmailAccountId")
                        .HasColumnName("email_account_id")
                        .HasColumnType("integer");

                    b.Property<string>("From")
                        .HasColumnName("from")
                        .HasColumnType("text");

                    b.Property<string>("FromName")
                        .HasColumnName("from_name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityId")
                        .HasColumnName("priority_id")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyTo")
                        .HasColumnName("reply_to")
                        .HasColumnType("text");

                    b.Property<string>("ReplyToName")
                        .HasColumnName("reply_to_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentOnUtc")
                        .HasColumnName("sent_on_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SentTries")
                        .HasColumnName("sent_tries")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnName("to")
                        .HasColumnType("text");

                    b.Property<string>("ToName")
                        .HasColumnName("to_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("queued_email");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Publications.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BandId")
                        .HasColumnName("band_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnName("guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.ToTable("publications");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Publications.PublicationFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("File")
                        .HasColumnName("file")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnName("guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publication_id")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publication_files");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CivilityId")
                        .HasColumnName("civility_id")
                        .HasColumnType("integer");

                    b.Property<bool>("Confirmed")
                        .HasColumnName("confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnName("disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnName("guid")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("text");

                    b.Property<string>("PasswordRecoveryToken")
                        .HasColumnName("password_recovery_token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordRecoveryTokenDateGenerated")
                        .HasColumnName("password_recovery_token_date_generated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CivilityId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<int>("PasswordFormat")
                        .HasColumnName("password_format")
                        .HasColumnType("integer");

                    b.Property<int>("PasswordFormatId")
                        .HasColumnName("password_format_id")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_passwords");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.Property<int>("TokenUse")
                        .HasColumnName("token_use")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtOnUtc")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Bands.Band", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Messages.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Publications.Publication", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Bands.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Publications.PublicationFile", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Publications.Publication", "Publication")
                        .WithMany("PublicationFiles")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.User", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Common.Civility", "Civility")
                        .WithMany()
                        .HasForeignKey("CivilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserPassword", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicHall.Core.Domain.Users.UserToken", b =>
                {
                    b.HasOne("MusicHall.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
